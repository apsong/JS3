#! /bin/sh

PROGRAM=`basename $0`

RUNTIME=.Azkaban
RCFILE=$RUNTIME/initrc
mkdir -p $RUNTIME
[ -f $RCFILE ] && . $RCFILE
[ -n "$AZKABAN_URL" ] && URL=$AZKABAN_URL
[ -n "$AZKABAN_PROJECT" ] && PROJECT=$AZKABAN_PROJECT
################################################################################
#0:DEBUG  1:INFO  2:WARN  3:ERROR
logLEVEL=2
logDEBUG()
{
    [ $logLEVEL -le 0 ] && echo 1>&2 "DEBUG:" "$@"
}
logINFO()
{
    [ $logLEVEL -le 1 ] && echo 1>&2 "INFO: " "$@"
}
logERROR()
{
    [ $logLEVEL -le 3 ] && echo 1>&2 "ERROR:" "$@"
}
[ $logLEVEL -eq 0 ] && CURL="curl -v -ksS" || CURL="curl -ksS"

EVAL()
{
    echo "#!CMD:[" $@ "]"
    eval "$@"
}
################################################################################
usage()
{
    echo 1>&2 "Usage:"
    {
        echo "    Azkaban project.create [URL] -p PROJECT [-d DESCRIPTION]"
        echo "    Azkaban project.delete [URL] -p PROJECT"
        echo "    Azkaban project.list   [URL]"
        echo "    Azkaban project.upload [URL] -p PROJECT -z ZIP"
        echo "    Azkaban project.Flows  [URL] -p PROJECT"
        echo "    Azkaban flow.execute    [URL] -p PROJECT -f FLOW [--wait] [flow.num.job.threads=1]"
        echo "    Azkaban flow.Executing  [URL] -p PROJECT -f FLOW"
        echo "    Azkaban flow.Executions [URL] -p PROJECT -f FLOW [-s START] [-l LENGTH]"
        echo "    Azkaban flow.Jobs       [URL] -p PROJECT -f FLOW [--raw]"
        echo "    Azkaban exec.cancel  [URL] -e EXECID"
        echo "    Azkaban exec.wait    [URL] -e EXECID"
        #echo "    Azkaban exec.pause   [URL] -e EXECID"
        #echo "    Azkaban exec.resume  [URL] -e EXECID"
        echo "    Azkaban exec.Status  [URL] -e EXECID [--raw]"
        echo "    Azkaban exec.Logs    [URL] -e EXECID [-j JOB] [-s START] [-l LENGTH] [--raw]"
        #echo "    Azkaban exec.Updates [URL] -e EXECID [-t LAST_UPDATE_TIME]"
    } | grep "$CMD" 1>&2
    echo 1>&2 ""
    echo 1>&2 "Note:"
    echo 1>&2 " 1. Defaults could be set in $RCFILE, which would be read first"
    echo 1>&2 ' 2. URL: default to $AZKABAN_URL, or "http://localhost:8081"'
}
################################################################################
getSessionID()
{
    ID_FILE=$RUNTIME/session_id.`echo $URL | sed -e 's@/@@g'`
    if [ -f $ID_FILE ]; then
        lastmod_seconds=`stat -c %Y $ID_FILE`
        current_sedonds=`date +%s`
        passed_hours=`expr \( $current_sedonds - $lastmod_seconds + 1 \) / 3600`
        if [ "$passed_hours" -ge 12 ]; then
            logINFO "Obsolete the old session_id in $ID_FILE"
            > $ID_FILE
        else
            session_id=`cat $ID_FILE`
            if [ -n "$session_id" ]; then
                logINFO "Get session_id $session_id from $ID_FILE"
                echo $session_id
                return 0
            fi
        fi
    fi
    session_id=`$CURL -X POST -d "action=login&username=system&password=manage" $URL 2>&1 \
                | awk -F\" '/session.id/{print $4}'`
    [ -z "$session_id" ] && { logERROR "Failed to get session_id"; return 1;}
    logINFO "Get session_id $session_id through authentication"
    echo $session_id | tee $ID_FILE
    return 0
}
### Pre Main ###################################################################
case "$PROGRAM" in
    Azkaban) CMD=$1; shift;;
    Azkaban.*) CMD=`echo $PROGRAM | sed -e 's/Azkaban\.//'`;;
    *) logERROR "Invalid PROGRAM '$PROGRAM'"; exit 1;;
esac

case "$CMD" in
    --help) CMD=""; usage; exit 0;;
    --mklinks)
        cd `dirname $0`
        for CMD in project.{create,delete,list,upload,Flows} \
                   flow.{execute,Jobs,Executions,Executing} \
                   exec.{wait,cancel,pause,resume,Status,Logs,Updates}; do
            ln -sfv Azkaban Azkaban.$CMD
        done; exit 0;;
esac

### Main #######################################################################

# Input arguments
while [ $# -gt 0 ]; do
    case "$1" in
        http*) URL=$1;;
        -p) shift; PROJECT=$1;;
        -d) shift; DESCRIPTION=$1;;
        -z) shift; ZIP=$1;;
        -f) shift; FLOW=$1;;
        -e) shift; EXECID=$1;;
        -j) shift; JOB=$1;;
        -s) shift; START=$1;;
        -l) shift; LENGTH=$1;;
        -t) shift; LAST_UPDATE_TIME=$1;;
        *=*) OPTIONS="$OPTIONS $1";;
        --wait) IS_WAIT="YES";;
        --raw)  IS_RAW="YES";;
        --debug) logLEVEL=0;;
        --info)  logLEVEL=1;;
        --warn)  logLEVEL=2;;
        --error) logLEVEL=3;;
        --help) usage; exit 0;;
        *) logERROR "Invalid parameter '$1'"; usage; exit 1;;
    esac
    shift
done
export IS_RAW logLEVEL

[ -z "$URL" ] && URL="http://localhost:8081"
logINFO "URL=$URL"
SESSION_ID=`getSessionID` || exit 2

OUTFILE=$RUNTIME/$CMD.out
case "$CMD" in
    project.create)
        [ -z "$PROJECT" ] && { logERROR "PROJECT must be set"; usage; exit 2;}
        [ -z "$DESCRIPTION" ] && DESCRIPTION=.
        $CURL -X POST -d "session.id=$SESSION_ID&name=$PROJECT&description=$DESCRIPTION" \
            "$URL/manager?action=create"
        echo ;;
    project.delete)
        [ -z "$PROJECT" ] && { logERROR "PROJECT must be set"; usage; exit 2;}
        $CURL -G -d "session.id=$SESSION_ID&project=$PROJECT" \
            "$URL/manager?delete=true"
        ;;
    project.list)
        $CURL -G -d "session.id=$SESSION_ID" "$URL/index" 2>/dev/null \
            | awk '/project=|project-last-modified/{print gensub("<[^>]*>", "", "g")}' \
            | awk '{name=$1; getline; printf("%-20s %s %s\n", name, $4, $5)}' | sort -b -k 2
        ;;
    project.upload)
        [ -z "$PROJECT" ] && { logERROR "PROJECT must be set"; usage; exit 2;}
        [ -z "$ZIP" ] && { logERROR "ZIP must be set"; usage; exit 2;}
        if [ -d "$ZIP" ]; then
            ZIP_DIR=`dirname $ZIP`; ZIP_NAME=`basename $ZIP`
            rm -f $ZIP.zip
            EVAL "cd $ZIP_DIR; zip -r $ZIP_NAME.zip $ZIP_NAME"
            ZIP=$ZIP_DIR/$ZIP_NAME.zip
        fi
        [ ! -f "$ZIP" ] && { logERROR "ZIP '$ZIP' doesn't exit as a normal file"; exit 3;}
        $CURL -X POST -H "Content-Type: multipart/mixed" \
            --form "session.id=$SESSION_ID" --form "ajax=upload" \
            --form "project=$PROJECT;type=plain" --form "file=@$ZIP;type=application/zip" \
            "$URL/manager"
        echo ;;
    project.Flows)
        [ -z "$PROJECT" ] && { logERROR "PROJECT must be set"; usage; exit 2;}
        $CURL -G -d "session.id=$SESSION_ID&project=$PROJECT" \
            "$URL/manager?ajax=fetchprojectflows"
        echo ;;
    flow.Jobs)
        [ -z "$PROJECT" ] && { logERROR "PROJECT must be set"; usage; exit 2;}
        [ -z "$FLOW" ] && { logERROR "FLOW must be set"; usage; exit 2;}
        OUTSTR=`$CURL -G -d "session.id=$SESSION_ID&project=$PROJECT&flow=$FLOW" \
            "$URL/manager?ajax=fetchflowgraph" 2>&1`
        if [ "$IS_RAW" = "YES" ]; then
            echo "$OUTSTR"
        else
            echo "$OUTSTR" | awk -F: '
            BEGIN { id=""; IN="" }
            {
                key=gensub(/[\" ]/, "", "g", $1)
                val=gensub(/[\"\[\] ]|,$/, "", "g", $2)
                if (key == "id") { id=val }
                else if (key == "type") { type=val }
                else if (key == "in") { IN = val }
                if ($0 ~ /}/ && id != "") {
                    if (IN == "") { ready[id]=1; print id }
                    else { dependencies[id] = "," IN "," }
                    id=""; IN=""
                }
            } END {
                indent="  "
                while (length(dependencies) > 0) {
                    for (ready_id in ready) {
                        for (id in dependencies) {
                            gsub("," ready_id ",", ",", dependencies[id])
                            if (dependencies[id] == ",") {
                                ready[id]=1; print indent id
                                delete dependencies[id]
                            }
                        }
                    }
                    indent = indent "  "
                }
            }'
        fi
        ;;
    flow.Executions)
        [ -z "$PROJECT" ] && { logERROR "PROJECT must be set"; usage; exit 2;}
        [ -z "$FLOW" ] && { logERROR "FLOW must be set"; usage; exit 2;}
        [ -z "$START" ] && START=0
        [ -z "$LENGTH" ] && LENGTH=-1
        $CURL -G -d "session.id=$SESSION_ID&project=$PROJECT&flow=$FLOW&start=$START&length=$LENGTH" \
            "$URL/manager?ajax=fetchFlowExecutions"
        echo ;;
    flow.Executing)
        [ -z "$PROJECT" ] && { logERROR "PROJECT must be set"; usage; exit 2;}
        [ -z "$FLOW" ] && { logERROR "FLOW must be set"; usage; exit 2;}
        $CURL -G -d "session.id=$SESSION_ID&project=$PROJECT&flow=$FLOW" \
            "$URL/executor?ajax=getRunning"
        echo ;;
    flow.execute)
        [ -z "$PROJECT" ] && { logERROR "PROJECT must be set"; usage; exit 2;}
        [ -z "$FLOW" ] && { logERROR "FLOW must be set"; usage; exit 2;}
        for OPTION in $OPTIONS; do
            PAIR=`echo $OPTION | awk -F= '{printf("&flowOverride[%s]=%s\n", $1, $2)}'`
            PAIRS="$PAIRS$PAIR"
        done
        OUTSTR=`$CURL -G -d "session.id=$SESSION_ID&project=$PROJECT&flow=$FLOW&$PAIRS" \
                "$URL/executor?ajax=executeFlow"`
        echo "$OUTSTR"
        if [ "$IS_WAIT" = "YES" ]; then
            EXECID=`echo "$OUTSTR" | awk '/"execid"/{print $3}'`
            exec Azkaban exec.wait -e $EXECID
        fi ;;
    exec.cancel)
        [ -z "$EXECID" ] && { logERROR "EXECID must be set"; usage; exit 2;}
        $CURL -G -d "session.id=$SESSION_ID&execid=$EXECID" \
            "$URL/executor?ajax=cancelFlow"
        echo ;;
    exec.pause)
        [ -z "$EXECID" ] && { logERROR "EXECID must be set"; usage; exit 2;}
        $CURL -G -d "session.id=$SESSION_ID&execid=$EXECID" \
            "$URL/executor?ajax=pauseFlow"
        echo ;;
    exec.resume)
        [ -z "$EXECID" ] && { logERROR "EXECID must be set"; usage; exit 2;}
        $CURL -G -d "session.id=$SESSION_ID&execid=$EXECID" \
            "$URL/executor?ajax=resumeFlow"
        echo ;;
    exec.wait)
        [ -z "$EXECID" ] && { logERROR "EXECID must be set"; usage; exit 2;}
        while [ 1 ]; do
            OUTSTR=`Azkaban exec.Status -e $EXECID`
            status=`echo "$OUTSTR" | awk '/^\[SUMMARY\]/{print $5}'`
            case "$status" in
                *ING)   logDEBUG "$status - sleep 10 to check again"; sleep 10;;
                SUCCEEDED) logDEBUG "$status - exit 0"; echo $status; exit 0;;
                *) logDEBUG "$status - exit 1"; echo $status; exit 1;;
            esac
        done ;;
    exec.Status)
        [ -z "$EXECID" ] && { logERROR "EXECID must be set"; usage; exit 2;}
        $CURL -G -d "session.id=$SESSION_ID&execid=$EXECID" \
                "$URL/executor?ajax=fetchexecflow" >$OUTFILE 2>&1
        if [ "$IS_RAW" = "YES" ]; then
            cat $OUTFILE
        else
            cat $OUTFILE | awk '
            {
                key=gensub(/[\",]/, "", "g", $1)
                val=gensub(/[\",]/, "", "g", $3)
                if (key=="id") {
                    id=val
                } else if (key=="type") {
                    type=val
                } else if (key=="startTime") {
                    start=val
                } else if (key=="endTime") {
                    end=val
                } else if (key=="status") {
                    status=val
                } else if (key=="nodes" || $0 ~ /}.*,/) {
                    if (key=="nodes") id = "[SUMMARY]"
                    if (start>0&&end>0) d=strftime("%H:%M:%S", (end-start)/1000, 1); else d="N/A"
                    if (start>0) start=strftime("%Y%m%d-%H:%M:%S", start/1000); else start="N/A"
                    if (end>0) end=strftime("%Y%m%d-%H:%M:%S", end/1000); else end="N/A"
                    s=sprintf("%-28s  %-15s  %-17s  %-17s  %-9s  %8s", id, type, start, end, status, d)
                    if (key=="nodes")
                        results["ZZZZ"]=s ;#Make sure to be last line
                    else
                        results[start end id]=s
                }
            } END {
                print "JOB                           TYPE             START              END                STATUS     DURATION"
                print "----------------------------  ---------------  -----------------  -----------------  ---------  --------"
                n=asorti(results, D)
                for (i=1; i<=n; i++) print(results[D[i]])
            }'
        fi
        echo ;;
    exec.Logs)
        [ -z "$EXECID" ] && { logERROR "EXECID must be set"; usage; exit 2;}
        [ -z "$START" ] && START=0
        [ -z "$LENGTH" ] && LENGTH=50000
        if [ -n "$JOB" ]; then
            OUTSTR=`$CURL -G -d "session.id=$SESSION_ID&execid=$EXECID&offset=$START&length=$LENGTH" \
                    "$URL/executor?ajax=fetchExecJobLogs&jobId=$JOB"`
        else
            OUTSTR=`$CURL -G -d "session.id=$SESSION_ID&execid=$EXECID&offset=$START&length=$LENGTH" \
                    "$URL/executor?ajax=fetchExecFlowLogs"`
        fi
        if [ "$IS_RAW" = "YES" ]; then
            echo "$OUTSTR"
        else
            echo "$OUTSTR" | awk '/"data" :/{
                n=split(substr($0, 13, length($0)-14), logs, /\\n/)
                for (i=1; i<=n; i++) { print logs[i] }
            }'
        fi ;;
    exec.Updates)
        [ -z "$EXECID" ] && { logERROR "EXECID must be set"; usage; exit 2;}
        [ -z "$LAST_UPDATE_TIME" ] && LAST_UPDATE_TIME=-1
        $CURL -G -d "session.id=$SESSION_ID&execid=$EXECID&lastUpdateTime=$LAST_UPDATE_TIME" \
            "$URL/executor?ajax=fetchexecflowupdate"
        echo ;;
    *) logERROR "Invalid sub command '$CMD'"; CMD=""; usage; exit 1;;
esac
