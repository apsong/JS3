#! /bin/sh

PROGRAM=`basename $0`

##################### .JS/bin/_SH_UTIL_FUNCTIONS <BEGIN> #######################
EVAL()
{
    echo "#!CMD:[" $@ "]" | awk '{printf "%.256s\n", $0}'
    eval "$@"
}

NEWFILE()
{
    FILE=$1; [ -z "$FILE" ] && { echo 1>&2 "($PROGRAM:NEWFILE)Error: FILE is not set"; exit 100;}

    REAL_FILE=.$FILE/`date "+%Y%m%d-%H%M%S"`#$FILE

    mkdir -p .$FILE || exit 101
    if [ -h $FILE ]; then
rm -f $FILE
    elif [ -e $FILE ]; then
echo 1>&2 "($PROGRAM:NEWFILE)Note: '$FILE' exists and is not a symbolic file. Renamed to '$REAL_FILE.bak'"
        mv $FILE $REAL_FILE.bak
    fi
touch $REAL_FILE && ln -s $REAL_FILE $FILE && echo $REAL_FILE || exit 102
}
##################### .JS/bin/_SH_UTIL_FUNCTIONS <END> #########################

DIR=$PWD
while [ "$DIR" != "/" ]; do
    [ -f $DIR/service.sh ] && break || DIR=`dirname $DIR`
done
[ ! -f $DIR/service.sh ] && { echo 1>&2 "Error: Incorrect work dir."; exit 1;}

case `basename $DIR` in
    BASE)
        DIR_BASE=$DIR
        DIR_SOLO=`find -L \`dirname $DIR\` -maxdepth 1 -name "[0-9]*[0-9]-*" | sort | tail -1`
        ;;
    *[0-9]*[0-9]-*)
        DIR_BASE=`dirname $DIR`/BASE
        DIR_SOLO=$DIR
        ;;
    *)
        echo 1>&2 "Error: Invalid `basename $DIR`"
        exit 103
        ;;
esac

MODULES=$DIR_BASE/modules
SOLO_MODULES=$DIR_SOLO/modules
#SERVICE=$DIR/service.sh
#DS_CFG=$MODULES/DocumentService/config/server.cfg
#JS_CFG=$MODULES/JobScheduler/config/server.cfg
#JS_JOB=$MODULES/JobScheduler/config/job.xml
#DS_SH=$MODULES/DocumentService/bin/startServer.sh
#SE_SH=$MODULES/SearchEngine/bin/startServer.sh

LANG=zh_CN.UTF-8
LC_ALL=zh_CN.UTF-8
export LANG LC_ALL

namenode_safe_mode_off()
{
    LOG=$MODULES/hadoop/hadoop-*/logs/*namenode*.log
    for i in `seq 12`; do
        EVAL "sleep 5; # for leaving Safe mode"
        if [ `grep -c "Safe mode is OFF" $LOG` -ge 1 ]; then
            return 0
        fi
    done
    return 1
}
case $PROGRAM in
    hadoop.hdfs.stop)
        EVAL "cd $MODULES/hadoop/ && ./node_daemon.sh stop -all && cd -"
        ;;
    hadoop.hdfs.start)
        EVAL "cd $MODULES/hadoop/ && ./node_daemon.sh start -all && cd -"
        namenode_safe_mode_off || echo 1>& "Error: namenode doesn't leave Safe mode after 60 seconds..."
        echo
        EVAL "jps | grep -E 'Node\>'"
        ;;
    hadoop.hdfs.restart)
        hadoop.hdfs.stop
        echo "#!CMD:[ rm -f $MODULES/hadoop/hadoop-*/logs/hadoop* ]"
        rm -f $MODULES/hadoop/hadoop-*/logs/hadoop*
        hadoop.hdfs.start
        ;;

    hadoop.yarn.stop)
        EVAL "cd $MODULES/hadoop/ && ./yarn_daemon.sh stop -all && cd -"
        ;;
    hadoop.yarn.start)
        EVAL "cd $MODULES/hadoop/ && ./yarn_daemon.sh start -all && cd -"
        echo
        EVAL "jps | grep -E 'Manager'"
        ;;
    hadoop.yarn.restart)
        hadoop.yarn.stop
        echo "#!CMD:[ rm -f $MODULES/hadoop/hadoop-*/logs/yarn* ]"
        rm -f $MODULES/hadoop/hadoop-*/logs/yarn*
        hadoop.yarn.start
        ;;

    hadoop.jobhistory.stop)
        EVAL "cd $MODULES/hadoop/ && ./mr_daemon.sh stop -jobhistory && cd -"
        ;;
    hadoop.jobhistory.start)
        EVAL "cd $MODULES/hadoop/ && ./mr_daemon.sh start -jobhistory && cd -"
        echo
        EVAL "jps | grep -E 'JobHistoryServer'"
        ;;
    hadoop.jobhistory.restart)
        hadoop.jobhistory.stop
        echo "#!CMD:[ rm -f $MODULES/hadoop/hadoop-*/logs/*history* ]"
        rm -f $MODULES/hadoop/hadoop-*/logs/*history*
        hadoop.jobhistory.start
        ;;

    hadoop.stop)
        EVAL "cd $MODULES/hadoop/ && ./mr_daemon.sh stop -jobhistory && cd -"
        EVAL "cd $MODULES/hadoop/ && ./yarn_daemon.sh stop -all && cd -"
        EVAL "cd $MODULES/hadoop/ && ./node_daemon.sh stop -all && cd -"
        ;;
    hadoop.start)
        EVAL "cd $MODULES/hadoop/ && ./node_daemon.sh start -all && cd -"
        namenode_safe_mode_off || echo 1>& "Error: namenode doesn't leave Safe mode after 60 seconds..."
        EVAL "cd $MODULES/hadoop/ && ./mr_daemon.sh start -jobhistory && cd -"
        EVAL "cd $MODULES/hadoop/ && ./yarn_daemon.sh start -all && cd -"
        echo
        EVAL "jps | grep -E 'Node|Manager|JobHistoryServer' | sort -n"
        ;;
    hadoop.restart)
        hadoop.stop
        echo "#!CMD:[ rm -f $MODULES/hadoop/hadoop-*/logs/* ]"
        rm -f $MODULES/hadoop/hadoop-*/logs/*
        hadoop.start
        ;;

    hive.stop)
        EVAL "cd $MODULES/hive/ && ./stopServer.sh all && cd -"
        ;;
    hive.start)
        EVAL "cd $MODULES/hive/ && ./startServer.sh all && cd -"
        echo
        EVAL "ps -eo 'pid,args' | grep [R]unJar | sed -e 's/-[DX][^ ]* //g' -e 's@/[^ ]*/@@g'"
        ;;
    hive.restart)
        hive.stop
        echo "#!CMD:[ rm -f $MODULES/hive/logs/* ]"
        rm -f $MODULES/hive/logs/*
        hive.start
        ;;

    mysql4ccb.stop)
        EVAL "cd $MODULES/mysql/ && ./stopServer.sh && cd -"
        ;;
    mysql4ccb.start)
        EVAL "cd $MODULES/mysql/ && ./startServer.sh && cd -"
        echo
        sleep 1
        echo
        EVAL "ps -eo 'pid,args' | grep [m]ysqld | sed -e 's/--[^ ]* //g'"
        ;;
    mysql4ccb.restart)
        mysql4ccb.stop
        echo "#!CMD:[ rm -f $MODULES/mysql/logs/* ]"
        rm -f $MODULES/mysql/logs/*
        mysql4ccb.start
        ;;

    azkaban.stop)
        EVAL "cd $SOLO_MODULES/AzkabanSoloServer/ && ./stopServer.sh all && cd -"
        jps | awk '/AzkabanSingleServer/{system("kill " $1);}'
        ;;
    azkaban.start)
        EVAL "cd $SOLO_MODULES/AzkabanSoloServer/ && ./startServer.sh all && cd -"
        echo
        EVAL "jps | grep Azkaban"
        ;;
    azkaban.restart)
        azkaban.stop
        sleep 1
        echo "#!CMD:[ rm -f $SOLO_MODULES/AzkabanSoloServer/{core.*, logs/*} ]"
        rm -f $SOLO_MODULES/AzkabanSoloServer/{core.*, logs/*}
        azkaban.start
        ;;

    sqoop.stop)
        EVAL "cd $SOLO_MODULES/sqoop/ && ./stopNode.sh && cd -"
        ;;
    sqoop.start)
        EVAL "cd $SOLO_MODULES/sqoop/ && ./startNode.sh && cd -"
        echo
        EVAL "jps | grep Bootstrap"
        ;;
    sqoop.restart)
        sqoop.stop
        sleep 3
        sqoop.start
        ;;

    tair.stop)
        EVAL "cd $SOLO_MODULES/tair/ && ./stopServer.sh -all && cd -"
        sleep 5
        echo
        EVAL "ps -eo 'pid,args' | grep '/sbin/[t]air'"
        ;;
    tair.start)
        EVAL "cd $SOLO_MODULES/tair/ && ./startServer.sh -all && cd -"
        echo
        EVAL "ps -eo 'pid,args' | grep '/sbin/[t]air'"
        ;;
    tair.restart)
        tair.stop
        echo "#!CMD:[ rm -f $SOLO_MODULES/tair/tair-*/* ]"
        rm -f $SOLO_MODULES/tair/tair-*/logs/*
        echo
        tair.start
        ;;

    ccb.status)
        echo "=== MySQL ==="
        ps -eo 'pid,args' | grep [m]ysqld | sed -e 's/--[^ ]* //g'
        echo
        echo "=== DataNode NameNode NodeManager ResourceManager & JobHistoryServer ==="
        jps | grep -E 'Node|Manager|JobHistory' | sort -n
        echo
        echo "=== HWIServer HiveServer2 ==="
        ps -eo 'pid,args' | grep [R]unJar | sed -e 's/-[DX][^ ]* //g' -e 's@/[^ ]*/@@g'
        echo
        echo "=== tair_cfg_svr tair_server ==="
        ps -eo 'pid,args' | grep '/sbin/[t]air'
        echo
        echo "=== sqoop:BootStrap ==="
        jps | grep Bootstrap
        echo
        echo "=== AzkabanSingleServer ==="
        jps | grep Azkaban
        ;;

    ccb.preInstall)
        cd $DIR_SOLO/hadoop_conf
        cp -v $MODULES/hadoop/hadoop-*/etc/hadoop/*-site.xml .
        cat > hive-client.conf << EOF
hive.cluster.mode=N
hiveserver2.user=sjin
hiveserver2.url=192.168.99.242:10000
EOF
        EVAL cat hive-client.conf
        ;;

esac

