#! /bin/bash

PROGRAM=`basename $0`
DPP=${0/$PROGRAM/DPP}

##################### .JS/bin/_SH_UTIL_FUNCTIONS <BEGIN> #######################
EVAL()
{
    echo "#!CMD:[" $@ "]" | awk '{printf "%.256s\n", $0}'
    eval "$@"
}
##################### .JS/bin/_SH_UTIL_FUNCTIONS <END> #########################

DPP_HOME=$PWD
while [ 1 ]; do
    [ "$DPP_HOME" = "/" ] && { echo 1>&2 "Error: Incorrect work dir: cannot find DPP_HOME"; exit 1;} 
    [ -d "$DPP_HOME/modules" -a -f "$DPP_HOME/service.sh" ] && break
    DPP_HOME=`dirname $DPP_HOME`
done

MODULES=$DPP_HOME/modules

LANG=zh_CN.UTF-8
LC_ALL=zh_CN.UTF-8
export LANG LC_ALL

usage()
{
    echo 1>&2 "Usage: DPP hadoop.hdfs.{start|stop|restart}"
    echo 1>&2 "       DPP hadoop.yarn.{start|stop|restart}"
    echo 1>&2 "       DPP hadoop.jobhistory.{start|stop|restart}"
    echo 1>&2 "       DPP hadoop.{start|stop|restart}"
    echo 1>&2 "       DPP hive.{start|stop|restart}"
    echo 1>&2 "       DPP sqoop.{start|stop|restart}"
    echo 1>&2 "       DPP mysql.{start|stop|restart}"
    echo 1>&2 "       DPP azkaban.{start|stop|restart}"
    echo 1>&2 "       DPP tair.{start|stop|restart}"
    echo 1>&2 "       DPP {start|stop|restart}"
    echo 1>&2 "       DPP status"
}

namenode_safe_mode_off()
{
    LOG=$MODULES/hadoop/logs/*namenode*.log
    for i in `seq 12`; do
        EVAL "sleep 5; # for leaving Safe mode"
        ON_NUM=`grep -c "Safe mode ON\." $LOG`
        OFF_NUM=`grep -c "Safe mode is OFF" $LOG`
        if [ $ON_NUM -eq $OFF_NUM -a $ON_NUM -ge 1 ]; then
            return 0
        fi
    done
    return 1
}

case "$1" in
    hadoop.hdfs.stop)
        EVAL "cd $MODULES/hadoop/ && ./node_daemon.sh stop -all && cd -"
        ;;
    hadoop.hdfs.start)
        EVAL "cd $MODULES/hadoop/ && ./node_daemon.sh start -all && cd -"
        namenode_safe_mode_off || echo 1>& "Error: namenode doesn't leave Safe mode after 60 seconds..."
        echo
        EVAL "jps | grep -E 'Node\>'"
        ;;
    hadoop.hdfs.restart)
        $DPP hadoop.hdfs.stop
        echo "#!CMD:[ rm -f $MODULES/hadoop/hadoop-*/logs/hadoop* ]"
        rm -f $MODULES/hadoop/hadoop-*/logs/hadoop*
        $DPP hadoop.hdfs.start
        ;;

    hadoop.yarn.stop)
        EVAL "cd $MODULES/hadoop/ && ./yarn_daemon.sh stop -all && cd -"
        ;;
    hadoop.yarn.start)
        EVAL "cd $MODULES/hadoop/ && ./yarn_daemon.sh start -all && cd -"
        echo
        EVAL "jps | grep -E 'Manager'"
        ;;
    hadoop.yarn.restart)
        $DPP hadoop.yarn.stop
        echo "#!CMD:[ rm -f $MODULES/hadoop/hadoop-*/logs/yarn* ]"
        rm -f $MODULES/hadoop/hadoop-*/logs/yarn*
        $DPP hadoop.yarn.start
        ;;

    hadoop.jobhistory.stop)
        EVAL "cd $MODULES/hadoop/ && ./mr_daemon.sh stop -jobhistory && cd -"
        ;;
    hadoop.jobhistory.start)
        EVAL "cd $MODULES/hadoop/ && ./mr_daemon.sh start -jobhistory && cd -"
        echo
        EVAL "jps | grep -E 'JobHistoryServer'"
        ;;
    hadoop.jobhistory.restart)
        $DPP hadoop.jobhistory.stop
        echo "#!CMD:[ rm -f $MODULES/hadoop/hadoop-*/logs/*history* ]"
        rm -f $MODULES/hadoop/hadoop-*/logs/*history*
        $DPP hadoop.jobhistory.start
        ;;

    hadoop.stop)
        EVAL "cd $MODULES/hadoop/ && ./mr_daemon.sh stop -jobhistory && cd -"
        EVAL "cd $MODULES/hadoop/ && ./yarn_daemon.sh stop -all && cd -"
        EVAL "cd $MODULES/hadoop/ && ./node_daemon.sh stop -all && cd -"
        ;;
    hadoop.start)
        EVAL "cd $MODULES/hadoop/ && ./node_daemon.sh start -all && cd -"
        namenode_safe_mode_off || echo 1>& "Error: namenode doesn't leave Safe mode after 60 seconds..."
        EVAL "cd $MODULES/hadoop/ && ./mr_daemon.sh start -jobhistory && cd -"
        EVAL "cd $MODULES/hadoop/ && ./yarn_daemon.sh start -all && cd -"
        echo
        EVAL "jps | grep -E 'Node|Manager|JobHistoryServer' | sort -n"
        ;;
    hadoop.restart)
        $DPP hadoop.stop
        echo "#!CMD:[ rm -f $MODULES/hadoop/hadoop-*/logs/* ]"
        rm -f $MODULES/hadoop/hadoop-*/logs/*
        $DPP hadoop.start
        ;;

    hive.stop)
        EVAL "cd $MODULES/hive/ && ./stopServer.sh all && cd -"
        ;;
    hive.start)
        EVAL "cd $MODULES/hive/ && ./startServer.sh all && cd -"
        echo
        sleep 1
        EVAL "jps -m | grep [R]unJar | sed -e 's@/[^ ]*/@@'"
        ;;
    hive.restart)
        $DPP hive.stop
        echo "#!CMD:[ rm -f $MODULES/hive/logs/* ]"
        rm -f $MODULES/hive/logs/*
        $DPP hive.start
        ;;

    mysql.stop)
        EVAL "cd $MODULES/mysql/ && ./stopServer.sh && cd -"
        ;;
    mysql.start)
        EVAL "cd $MODULES/mysql/ && ./startServer.sh && cd -"
        echo
        sleep 1
        echo
        EVAL "ps -eo 'pid,args' | grep [m]ysqld | sed -e 's/--[^ ]* //g'"
        ;;
    mysql.restart)
        $DPP mysql.stop
        echo "#!CMD:[ rm -f $MODULES/mysql/logs/* ]"
        rm -f $MODULES/mysql/logs/*
        $DPP mysql.start
        ;;

    zookeeper.stop)
        EVAL "cd $MODULES/zookeeper/ && ./stopServer.sh && cd -"
        ;;
    zookeeper.start)
        EVAL "cd $MODULES/zookeeper/ && ./startServer.sh && cd -"
        sleep 1
        echo
        EVAL "jps -m | grep zoo"
        ;;
    zookeeper.restart)
        $DPP zookeeper.stop
        echo "#!CMD:[ rm -f $MODULES/zookeeper/logs/* ]"
        rm -f $MODULES/zookeeper/logs/*
        $DPP zookeeper.start
        ;;

    azkaban.stop)
        for D in `find $MODULES -maxdepth 1 -type d -name "Azkaban*Server"`; do
            EVAL "cd $D && ./stopServer.sh && cd -"
        done
        jps | awk '/Azkaban.*Server/{system("kill " $1);}'
        ;;
    azkaban.start)
        for D in `find $MODULES -maxdepth 1 -type d -name "Azkaban*Server"`; do
            EVAL "cd $D && ./startServer.sh && cd -"
        done
        echo
        EVAL "jps | grep Azkaban"
        ;;
    azkaban.restart)
        $DPP azkaban.stop
        sleep 1
        echo "#!CMD:[ rm -f $MODULES/Azkaban*Server/{core.*, logs/*} ]"
        rm -f $MODULES/Azkaban*Server/{core.*, logs/*}
        $DPP azkaban.start
        ;;

    sqoop.stop)
        EVAL "cd $MODULES/sqoop/ && ./stopNode.sh && cd -"
        ;;
    sqoop.start)
        EVAL "cd $MODULES/sqoop/ && ./startNode.sh && cd -"
        echo
        EVAL "jps | grep Bootstrap"
        ;;
    sqoop.restart)
        $DPP sqoop.stop
        sleep 3
        $DPP sqoop.start
        ;;

    tair.stop)
        EVAL "cd $MODULES/tair/ && ./stopServer.sh -all && cd -"
        sleep 5
        echo
        EVAL "ps -eo 'pid,args' | grep '/sbin/[t]air'"
        ;;
    tair.start)
        EVAL "cd $MODULES/tair/ && ./startServer.sh -all && cd -"
        echo
        EVAL "ps -eo 'pid,args' | grep '/sbin/[t]air'"
        ;;
    tair.restart)
        $DPP tair.stop
        echo "#!CMD:[ rm -f $MODULES/tair/tair-*/* ]"
        rm -f $MODULES/tair/tair-*/logs/*
        echo
        $DPP tair.start
        ;;

    stop)
        $DPP azkaban.stop   ; echo
        $DPP tair.stop      ; echo
        $DPP sqoop.stop     ; echo
        $DPP hive.stop      ; echo
        $DPP hadoop.stop    ; echo
        $DPP zookeeper.stop ; echo
        $DPP mysql.stop     ; echo
        ;;
    start)
        $DPP mysql.start    ; echo
        $DPP zookeeper.start; echo
        $DPP hadoop.start   ; echo
        $DPP hive.start     ; echo
        $DPP sqoop.start    ; echo
        $DPP tair.start     ; echo
        $DPP azkaban.start  ; echo
        ;;
    restart)
        $DPP stop
        $DPP start
        echo
        $DPP status
        ;;

    status)
        if [ -d $MODULES/mysql ]; then
            echo "=== MySQL ==="
            ps -eo 'pid,args' | grep [m]ysqld | sed -e 's/--[^ ]* //g'
            echo
        fi
        if [ -d $MODULES/zookeeper ]; then
            echo "=== zookeeper:QuorumPeerMain ==="
            jps -m | grep zoo
            echo
        fi
        if [ -d $MODULES/hadoop ]; then
            echo "=== DataNode NameNode NodeManager ResourceManager & JobHistoryServer ==="
            jps | grep -E 'Node|Manager|JobHistory' | sort -n
            echo
        fi
        if [ -d  $MODULES/hive ]; then
            echo "=== HWIServer HiveServer2 ==="
            jps -m | sed -e 's@/[^ ]*/@@' | grep [R]unJar
            echo
        fi
        if [ -d  $MODULES/hbase ]; then
            echo "=== HMaster HRegionServer ==="
            jps -m | sort -k 2 | grep -E 'HMaster|HRegionServer'
            echo
        fi
        if [ -d  $MODULES/sqoop ]; then
            echo "=== sqoop:BootStrap ==="
            jps | grep Bootstrap
        fi
        echo
        if [ -d  $MODULES/tair ]; then
            echo "=== tair_cfg_svr tair_server ==="
            ps -eo 'pid,args' | grep '/sbin/[t]air'
            echo
        fi
        for AS in AzkabanWeb AzkabanExec AzkabanSolo; do
            if [ -d  $MODULES/${AS}Server ]; then
                echo "=== ${AS}Server ==="
                jps | grep $AS.*Server
            fi
        done
        ;;

    sync)
        for H in `cat $DPP_HOME/slaves.properties`; do
            [ `ifconfig | grep -c $H` -gt 0 ] && continue
            echo "#[ scp: $H ]"
            shift
            if [ $# -eq 0 ]; then
                scp -r $DPP_HOME/util $H:$DPP_HOME
            else
                for D; do
                    case "$D" in
                        /*) scp -r "$D" $H:     ;;
                        *)  scp -r "$D" `dirname $H:$PWD/$D` ;;
                    esac
                done
            fi
        done
        ;;

    env)
        DPP_ENV=/tmp/DPP.env
        >$DPP_ENV
        echo >>$DPP_ENV '[ -z "$PATH_DPP_BAK" ] && export PATH_DPP_BAK=$PATH'
        echo >>$DPP_ENV "export DPP_PATH=$DPP_HOME:$DPP_HOME/util"
        echo >>$DPP_ENV "alias .workflow='cd $DPP_HOME/workflows; cd ccb; ls'"

        HADOOP_HOME=`find $MODULES/hadoop -maxdepth 1 -type d -name "hadoop-*" | tail -1`
        if [ -n "$HADOOP_HOME" ]; then
            echo >>$DPP_ENV "alias .hadoop='cd $HADOOP_HOME; ls'"
            echo >>$DPP_ENV "alias .hadoop.etc='cd $HADOOP_HOME/etc/hadoop; ls'"
            echo >>$DPP_ENV "alias .yarn.log='cd $MODULES/hadoop/storage/tmp/nodemanager/logs; ls'"
            echo >>$DPP_ENV "export DPP_PATH=\$DPP_PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin"
        fi

        AZKABAN_EXEC_HOME=`find $MODULES -maxdepth 2 -type d -name "azkaban-executor-*" | tail -1`
        if [ -n "$AZKABAN_EXEC_HOME" ]; then
            cat >>$DPP_ENV <<EOF
function .azkaban.exec.latest()
{
    local _execid=\$(ls -t $AZKABAN_EXEC_HOME/executions | head -1)
    [ -n "\$1" ] && local _execid=\$1
    local _newdir=\$(pwd | sed -e "s^/executions/[0-9]\+^/executions/\$_execid^")
    if [ "\$_newdir" = "\$PWD" ]; then
        cd $AZKABAN_EXEC_HOME/executions/\$_execid; ls
    else
        cd \$_newdir; ls
    fi
}
EOF
        fi

        echo >>$DPP_ENV 'export PATH=$DPP_PATH:$PATH_DPP_BAK'
        echo >>$DPP_ENV ". $DPP_HOME/util/.bash_functions"
        EVAL cat $DPP_ENV
        ;;

    *) usage; exit 1;;
esac

