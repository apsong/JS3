#! /bin/sh

PROGRAM=`basename $0`

##################### .JS/bin/_SH_UTIL_FUNCTIONS <BEGIN> #######################
EVAL()
{
    echo "#!CMD:[" $@ "]" | awk '{printf "%.256s\n", $0}'
    eval "$@"
}

NEWFILE()
{
    FILE=$1; [ -z "$FILE" ] && { echo 1>&2 "($PROGRAM:NEWFILE)Error: FILE is not set"; exit 100;}

    REAL_FILE=.$FILE/`date "+%Y%m%d-%H%M%S"`#$FILE

    mkdir -p .$FILE || exit 101
    if [ -h $FILE ]; then
rm -f $FILE
    elif [ -e $FILE ]; then
echo 1>&2 "($PROGRAM:NEWFILE)Note: '$FILE' exists and is not a symbolic file. Renamed to '$REAL_FILE.bak'"
        mv $FILE $REAL_FILE.bak
    fi
touch $REAL_FILE && ln -s $REAL_FILE $FILE && echo $REAL_FILE || exit 102
}
##################### .JS/bin/_SH_UTIL_FUNCTIONS <END> #########################

DIR=$PWD
while [ "$DIR" != "/" ]; do
    [ -f $DIR/install.sh ] && break || DIR=`dirname $DIR`
done
[ ! -f $DIR/install.sh ] && { echo 1>&2 "Error: Incorrect work dir."; exit 1;}

MODULES=$DIR/modules

case $PROGRAM in
    dsc.stop)
        EVAL "cd $MODULES/DocumentServiceConsole/bin/ && ./stopServer.sh all && cd -"
        ;;
    dsc.start)
        EVAL "cd $MODULES/DocumentServiceConsole/bin/ && ./startServer.sh all && cd -"
        ;;
    dsc.restart)
        dsc.stop
        echo "#!CMD:[ rm -rf $MODULES/DocumentServiceConsole/logs/* ]"
        rm -rf $MODULES/DocumentServiceConsole/logs/*
        dsc.start
        ;;

    ds.stop)
        EVAL $MODULES/DocumentService/bin/startServer.sh stop
        ;;
    ds.start)
        EVAL $MODULES/DocumentService/bin/startServer.sh start
        ;;
    ds.clean)
        echo "#!CMD:[ rm -rf $MODULES/DocumentService/temp/* ]"
        rm -rf $MODULES/DocumentService/temp/*
        EVAL ls $MODULES/DocumentService/temp/
        ;;
    ds.restart)
        ds.stop
        ds.clean
        echo "#!CMD:[ rm -rf $MODULES/DocumentService/logs/* ]"
        rm -rf $MODULES/DocumentService/logs/*
        EVAL ls $MODULES/DocumentService/logs/
        ds.start
        ;;

    js.stop)
        EVAL $MODULES/JobScheduler/bin/startServer.sh stop
        ;;
    js.start)
        EVAL $MODULES/JobScheduler/bin/startServer.sh start
        ;;
    js.clean)
        echo "#!CMD:[ rm -rf $MODULES/JobScheduler/temp/* ]"
        rm -rf $MODULES/JobScheduler/temp/*
        EVAL ls $MODULES/JobScheduler/temp/
        ;;
    js.restart)
        js.stop
        js.clean
        echo "#!CMD:[ rm -rf $MODULES/JobScheduler/logs/* ]"
        rm -rf $MODULES/JobScheduler/logs/*
        EVAL ls $MODULES/JobScheduler/logs/
        js.start
        ;;

    zk.stop)
        EVAL "cd $MODULES/zookeeper/ && ./stopServer.sh && cd -"
        ;;
    zk.start)
        EVAL "cd $MODULES/zookeeper/ && ./startServer.sh && cd -"
        ;;
    zk.restart)
        zk.stop
        echo "#!CMD:[ rm -rf $MODULES/zookeeper/*.out ]"
        rm -rf $MODULES/zookeeper/*.out
        zk.start
        ;;

    se.stop)
        EVAL "$MODULES/SearchEngine/bin/startServer.sh stop"
        ;;
    se.start)
        EVAL "$MODULES/SearchEngine/bin/startServer.sh start"
        ;;
    se.restart)
        se.stop
        echo "#!CMD:[ rm -rf $MODULES/SearchEngine/bin/{*.out,*.log} ]"
        rm -rf $MODULES/SearchEngine/bin/{*.out,*.log}
        rm -rf searchEngine.log searchengine.out
        se.start
        ;;

    mg.stop)
        EVAL "$MODULES/mongodb/mongodb/bin/mongod -f $MODULES/mongodb/config/mongod.conf --shutdown"
        ;;
    mg.start)
        EVAL "$MODULES/mongodb/mongodb/bin/mongod -f $MODULES/mongodb/config/mongod.conf"
        ;;
    mg.restart)
        mg.stop
        EVAL "rm -rf $MODULES/mongodb/mongodb/*.log"
        mg.start
        ;;

    all.start)
        EVAL "cd $DIR && ./uninstall.sh -startAll && cd -"
        ;;
    all.stop)
        EVAL "cd $DIR && ./uninstall.sh -stopAll && cd -"
        ;;
    all.restart)
        EVAL "cd $DIR && ./uninstall.sh -restartAll && cd -"
        ;;

    my.postInstall)
        cp -v /TEST/redis* $MODULES/DocumentServiceConsole/redis-2.8.12/src
        DS_CFG=$MODULES/DocumentService/config/server.cfg
        if [ ! -f $DS_CFG.bak ]; then
            cp $DS_CFG $DS_CFG.bak
            sed -e 's/listeningServer.pool.maxWorkerThreads=.*$/&\ndebugMode=true/' $DS_CFG.bak > $DS_CFG
        fi
        EVAL diff $DS_CFG.bak $DS_CFG
        ;;
esac

