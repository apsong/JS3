#! /bin/sh

PROGRAM=`basename $0`

##################### .JS/bin/_SH_UTIL_FUNCTIONS <BEGIN> #######################
EVAL()
{
    echo "#!CMD:[" $@ "]"
    eval "$@"
}

NEWFILE()
{
    FILE=$1; [ -z "$FILE" ] && { echo 1>&2 "($PROGRAM:NEWFILE)Error: FILE is not set"; exit 100;}

    REAL_FILE=.$FILE/`date "+%Y%m%d-%H%M%S"`#$FILE

    mkdir -p .$FILE || exit 101
    if [ -h $FILE ]; then
rm -f $FILE
    elif [ -e $FILE ]; then
echo 1>&2 "($PROGRAM:NEWFILE)Note: '$FILE' exists and is not a symbolic file. Renamed to '$REAL_FILE.bak'"
        mv $FILE $REAL_FILE.bak
    fi
touch $REAL_FILE && ln -s $REAL_FILE $FILE && echo $REAL_FILE || exit 102
}
##################### .JS/bin/_SH_UTIL_FUNCTIONS <END> #########################

usage()
{
    echo 1>&2 "Usage: $PROGRAM -i TESTPLAN -d APACHE_DIR"
    echo 1>&2 " $PROGRAM -i TS -d AJC121207"
}

while [ $# -gt 0 ]; do
case "$1" in
        -i) shift; TESTPLAN="$1";;
        -d) shift; APACHE_DIR="$1";;
        --help) usage; exit 0;;
        *) echo 1>&2 "($PROGRAM)Error: Invalid option '$1'"; usage; exit 1;;
    esac
shift
done

[ -z "$TESTPLAN" ] && { echo 1>&2 "($PROGRAM)Error: TESTPLAN is not set!"; usage; exit 2;}
[ -z "$APACHE_DIR" ] && { echo 1>&2 "($PROGRAM)Error: APACHE_DIR is not set!"; usage; exit 3;}

echo $TESTPLAN
echo $APACHE_DIR
