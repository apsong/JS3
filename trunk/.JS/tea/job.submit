#! /usr/bin/tclsh

##################################################################################
package require http
package require tls
package require json
package require log
package require base64

::http::register https 443 ::tls::socket

if {![info exists ::env(TEA_LOG)]} {
    set ::env(TEA_LOG) warning
}
foreach lv [log::levels] {
    if {[log::lvCompare $lv $::env(TEA_LOG)] < 0} {
        log::lvSuppress $lv
    } else {
        log::lvSuppress $lv 0
    }
#puts "$lv: [log::lvIsSuppressed $lv]"
}

proc jsonGet {_RESULT url} {
    log::log info "GET: $url"
    upvar 1 $_RESULT RESULT

    set tok [::http::geturl $url]
    if {[::http::status $tok] != "ok"} {
        error "Failed to \[jsonPost $url $json\] with returned tok:\n{[array get $tok]}"
    }
    if {$_RESULT != ""} {
        set RESULT [::http::data $tok]
        log::log info "=> $RESULT"
    }
    ::http::cleanup $tok
}

proc jsonPost {_RESULT url json} {
    log::log info "POST: $url\nJSON: {$json}"
    upvar 1 $_RESULT RESULT

    set tok [::http::geturl $url -type application/json -query "{$json}"]
    if {[::http::status $tok] != "ok"} {
        error "Failed to \[jsonPost $url $json\] with returned tok:\n{[array get $tok]}"
    }
    if {$_RESULT != ""} {
        set RESULT [::http::data $tok]
        log::log info "=> $RESULT"
    }
    ::http::cleanup $tok
}

##################################################################################
set PROGRAM [file tail $argv0]

set HOST localhost
set PORT 9091
set URL_BASE https://$HOST:$PORT

jsonPost R $URL_BASE/api?method=user.authorize {"userid":"test","password":"test"}
set token [dict get [::json::json2dict $R] response token]

switch -exact -- $PROGRAM {
    job.submit {
        set csv u1d1.csv
        set rpt daily.rptdesign

        foreach arg $argv {
            switch -glob -- $arg {
                *.csv       { set csv [regsub {/TEST/data/} $arg {}] }
                *.rptdesign { set rpt $arg }
                default     { error "($PROGRAM)Error: unknown argument '$arg'" }
            }
        }
        jsonPost R $URL_BASE/api?method=job.submit&name=CSV2PDF&token=$token [subst -nocommands {
            "options" : [
                    {"name" : "localFile", "value" : "$csv"},
                    {"name" : "reportPath", "value" : "$rpt"},
                    {"name" : "hasHeader", "value" : true},
                    {"name" : "hasDataType", "value" : true},
                    {"name" : "sep", "value" : ","},
                    {"name" : "keyExpr", "value" : "if({0}==''){{2}}else{{0}}"},
                    {"name" : "encoding", "value" : "utf-8"}
                ],
            "parameters" : []
        }]
    }
    doc.query {
        jsonPost R $URL_BASE/api?method=doc.query&token=$token [subst {
            "query":{[lindex $argv 0]}
        }]
    }
    doc.download {
        set id [regsub -- {id=} [lindex $argv 0] {}]
        jsonGet R $URL_BASE/api?method=$PROGRAM&id=[regsub -- {id=} [lindex $argv 0] {}]&token=$token
        set b64str [dict get [::json::json2dict $R] response]
        set pdf "/tmp/$id.pdf"
        set fd [open $pdf w]
        puts -nonewline $fd [::base64::decode $b64str]
        close $fd
        log::log critical "($PROGRAM) file is downloaded to $pdf"
        exit
    }
    default {
        if {$argc == 0} {
            jsonGet  R $URL_BASE/api?token=$token&method=$PROGRAM
        } else {
            set arg1 [lindex $argv 0]
            if {[string match "*=*" $arg1]} {
                jsonGet R $URL_BASE/api?token=$token&method=$PROGRAM&$arg1
            } else {
                jsonPost R $URL_BASE/api?token=$token&method=$PROGRAM [lindex $argv 0]
            }
        }
        #error "($PROGRAM)Error: unknown command '$PROGRAM'"
    }
}

set fd [open "|underscore print --color" w]
puts $fd $R
close $fd
