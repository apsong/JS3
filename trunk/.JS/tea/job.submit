#! /usr/bin/tclsh

##################################################################################
source [file join [pwd] [file dirname $argv0] util.tcl]

package require http
package require tls
package require json
package require log
package require base64

::http::register https 443 ::tls::socket

if {![info exists ::env(TEA_LOG)]} {
    set ::env(TEA_LOG) warning
}
foreach lv [log::levels] {
    if {[log::lvCompare $lv $::env(TEA_LOG)] < 0} {
        log::lvSuppress $lv
    } else {
        log::lvSuppress $lv 0
    }
#puts "$lv: [log::lvIsSuppressed $lv]"
}

proc jsonGet {_RESULT url} {
    log::log info "GET: $url"
    upvar 1 $_RESULT RESULT

    set tok [::http::geturl $url]
    if {[::http::status $tok] != "ok"} {
        error "Failed to \[jsonGet $url\] with returned tok:\n{[array get $tok]}"
    }
    if {$_RESULT != ""} {
        set RESULT [::http::data $tok]
        log::log info "=> $RESULT"
    }
    ::http::cleanup $tok
}

proc jsonPost {_RESULT url json} {
    log::log info "POST: $url\nJSON: {$json}"
    upvar 1 $_RESULT RESULT

    set tok [::http::geturl $url -keepalive 1 -type application/json -query "{$json}"]
    if {[::http::status $tok] != "ok"} {
        error "Failed to \[jsonPost $url $json\] with returned tok:\n{[array get $tok]}"
    }
    if {$_RESULT != ""} {
        set RESULT [::http::data $tok]
        log::log info "=> $RESULT"
    }
    ::http::cleanup $tok
}

##################################################################################
set PROGRAM [file tail $argv0]

set HOST 192.168.99.85
set PORT 9091
set URL_BASE https://$HOST:$PORT

jsonPost R $URL_BASE/api?method=user.authorize {"userid":"system","password":"manage"}
if {[catch {dict get [::json::json2dict $R] response token} token]} {
    log::log error "($PROGRAM) $R"
    exit 1
}

switch -exact -- $PROGRAM {
    job.submit {
        set rpt /public/daily.rptdesign

        foreach arg $argv {
            switch -glob -- $arg {
                *.csv       { lappend csvs [regsub {/TEST/data/} $arg {}] }
                *.rptdesign { set rpt $arg }
                default     { error "($PROGRAM)Error: unknown argument '$arg'" }
            }
        }
        if {![info exists csvs]} {
            lappend csvs u1d1.csv
        }
        foreach csv $csvs {
            jsonPost R $URL_BASE/api?method=job.submit&name=CSV2DOC&token=$token [subst -nocommands {
                "options" : [
                        {"name" : "localFile", "value" : "$csv"},
                        {"name" : "reportPath", "value" : "$rpt"},
                        {"name" : "hasHeader", "value" : true},
                        {"name" : "hasDataType", "value" : true},
                        {"name" : "sep", "value" : ","},
                        {"name" : "keyExpr", "value" : "if({0}==''){{2}}else{{0}}"},
                        {"name" : "encoding", "value" : "utf-8"}
                    ],
                "parameters" : []
            }]
            set fd [open "|underscore print --color" w]
            puts $fd $R
            close $fd
        }
        exit
    }
    doc.query {
        jsonPost R $URL_BASE/api?method=doc.query&token=$token [subst {
            "query":{[lindex $argv 0]}
        }]
    }
    doc.queryRandom {
        if {[info exists ::env(INTERVAL)]} {
            set interval $::env(INTERVAL)
            puts "\[[nowtimeAdd]\] interval=$interval (from \$env(INTERVAL))"
        } else {
            set interval 10
            puts "\[[nowtimeAdd]\] interval=$interval (by default)"
        }

        puts "\[[nowtimeAdd]\] ($PROGRAM) Preparing keys for query..."
        #set fd [open "|mg.findColumn | shuf -n 1000000 --random-source=/opt/random10M"]
        set fd [open "|mg.findColumn | shuf -n 1000000"]
        while {[gets $fd id] >= 0} {
            lappend ids $id
        }
        close $fd
        puts "\[[nowtimeAdd]\] ($PROGRAM) Query start~"
        set len [llength $ids]

        set next [clock seconds]
        for {set i 0; set count 0} {true} {incr i; incr count} {
            set id [lindex $ids [expr {$i%$len}]]
            
            if {$i%1==0} {
                set now [clock seconds]
                if {$now >= $next} {
                    jsonPost R $URL_BASE/api?method=doc.query&token=$token [subst {
                        "query":{"metadata.parameter.merchantid":"$id"}
                    }]
                    set filenames {}
                    if {[catch {
                        foreach resp [dict get [::json::json2dict $R] response] {
                            lappend filenames [dict get $resp filename]
                        }
                    }]} {
                        set filenames $R
                    }
                    puts "\[[nowtime $now]\] $count => ID: $id  FILE: $filenames"
                    set count 0
                    set next [expr {[clock seconds] + $interval}]
                    continue
                }
            }

            jsonPost {} $URL_BASE/api?method=doc.query&token=$token [subst {
                "query":{"metadata.parameter.merchantid":"$id"}
            }]
        }
        exit
    }
    doc.download {
        set id [regsub -- {id=} [lindex $argv 0] {}]
        jsonGet R $URL_BASE/api?method=$PROGRAM&id=$id&token=$token
        set b64str [dict get [::json::json2dict $R] response]
        set pdf "/tmp/$id.pdf"
        set fd [open $pdf w]
        puts -nonewline $fd [::base64::decode $b64str]
        close $fd
        log::log critical "($PROGRAM) file is downloaded to $pdf"
        exit
    }
    job.info.query - job.cancel - job.delete {
        if {$argc == 0} {
            jsonGet R $URL_BASE/api?method=$PROGRAM&token=$token
        } else {
            set id [regsub -- {id=} [lindex $argv 0] {}]
            if {![string match JOB* $id]} {
                set id [format "JOB%010d" $id]
            }
            jsonGet R $URL_BASE/api?method=$PROGRAM&id=$id&token=$token
        }
    }
    default {
        if {$argc == 0} {
            jsonGet  R $URL_BASE/api?token=$token&method=$PROGRAM
        } else {
            set arg1 [lindex $argv 0]
            if {[string match "*=*" $arg1]} {
                jsonGet R $URL_BASE/api?token=$token&method=$PROGRAM&$arg1
            } else {
                jsonPost R $URL_BASE/api?token=$token&method=$PROGRAM [lindex $argv 0]
            }
        }
        #error "($PROGRAM)Error: unknown command '$PROGRAM'"
    }
}

set fd [open "|underscore print --color" w]
puts $fd $R
close $fd
