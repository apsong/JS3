#! /usr/bin/tclsh

##################################################################################
package require http
package require tls
package require json
package require log
package require base64

::http::register https 443 ::tls::socket

if {![info exists ::env(TEA_LOG)]} {
    set ::env(TEA_LOG) warning
}
foreach lv [log::levels] {
    if {[log::lvCompare $lv $::env(TEA_LOG)] < 0} {
        log::lvSuppress $lv
    } else {
        log::lvSuppress $lv 0
    }
#puts "$lv: [log::lvIsSuppressed $lv]"
}

proc jsonGet {_RESULT url} {
    log::log info "GET: $url"
    upvar 1 $_RESULT RESULT

    set tok [::http::geturl $url]
    if {[::http::status $tok] != "ok"} {
        error "Failed to \[jsonPost $url $json\] with returned tok:\n{[array get $tok]}"
    }
    if {$_RESULT != ""} {
        set RESULT [::http::data $tok]
        log::log info "=> $RESULT"
    }
    ::http::cleanup $tok
}

proc jsonPost {_RESULT url json} {
    log::log info "POST: $url\nJSON: {$json}"
    upvar 1 $_RESULT RESULT

    set tok [::http::geturl $url -type application/json -query "{$json}"]
    if {[::http::status $tok] != "ok"} {
        error "Failed to \[jsonPost $url $json\] with returned tok:\n{[array get $tok]}"
    }
    if {$_RESULT != ""} {
        set RESULT [::http::data $tok]
        log::log info "=> $RESULT"
    }
    ::http::cleanup $tok
}

proc formPost {_RESULT url KeyValueS} {
    set form [eval ::http::formatQuery $KeyValueS]]
    log::log info "POST: $url\nFORM: $form"
    upvar 1 $_RESULT RESULT

    set tok [::http::geturl $url -query $form]
    if {[::http::status $tok] != "ok"} {
        error "Failed to \[formPost $url $KeyValueS\] with returned tok:\n{[array get $tok]}"
    }
    if {$_RESULT != ""} {
        set RESULT [::http::data $tok]
        log::log info "=> $RESULT"
    }
    ::http::cleanup $tok
}
##################################################################################
set PROGRAM [file tail $argv0]

set HOST localhost
set PORT 9091
set URL_BASE https://$HOST:$PORT

jsonPost R $URL_BASE/api?method=user.authorize {"userid":"test","password":"test"}
set token [dict get [::json::json2dict $R] response token]

switch -exact -- $PROGRAM {
    rpt.preview {
        set csv u1d1.csv
        set rpt daily.rptdesign

        foreach arg $argv {
            switch -glob -- $arg {
                *.csv       { set csv [regsub {/TEST/data/} $arg {}] }
                *.rptdesign { set rpt $arg }
                default     { error "($PROGRAM)Error: unknown argument '$arg'" }
            }
        }
        set parameters {[{"name":"merchantid","value":"999290053110041"}]}
        formPost R $URL_BASE/api?method=report.preview&token=$token [list data $csv reportPath $rpt format html parameters $parameters]
        puts $R
    }
}
